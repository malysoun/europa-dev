# -*- mode: ruby -*-
# vi: set ft=ruby :

zenoss ||= {}

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.omnibus.chef_version = :latest

  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "ef19"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://vagrant.zendev.org/boxes/F19_JP.box"

  ###############################
  # Forward zproxy to host
  config.vm.network :forwarded_port, guest: 8080, host: 8080
  # Forward zope to host
  config.vm.network :forwarded_port, guest: 9080, host: 9080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  #config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # NFS share for zenoss source
#  config.vm.synced_folder "../../src", "/zensrc",
#                :nfs => true


  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
    vb.customize ["modifyvm", :id,
        "--memory", "4096", 
        "--cpus", "4", 
        "--ioapic", "on", 
        "--natdnshostresolver1", "on"]
  end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file f19.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  config.vm.provision :chef_solo do |chef|
    chef.cookbooks_path = "../../chef/cookbooks"

    ## These recipes are preinstalled on the default base box.
    chef.add_recipe "zenoss::yum"
    chef.add_recipe "build-essential"
    chef.add_recipe "java"
    #chef.add_recipe "maven"

    ## These recipes are as preinstalled as possible, but chef will ensure
    ## the correct services are all started.
    chef.add_recipe "memcached"
    chef.add_recipe "python"
    #chef.add_recipe "mysql"
    #chef.add_recipe "rabbitmq"
    chef.add_recipe "docker"
    chef.add_recipe "zenoss::dependencies"
    chef.add_recipe "zenoss::user"
    chef.add_recipe "zenoss::zenhome"


    # These recipes actually build Zenoss.
    #chef.add_recipe "zenoss::sourcebuild"
    #chef.add_recipe "zenoss::mkzenossinstance"

    chef.json = {
        :rabbitmq => {
            :version => '3.1.5'
        },
        :zenoss => zenoss.merge({
            :zenhome => "/opt/zenoss",
            :username => "zendev",
            :group => "zendev",
            # shadow hash of "zendev"
            :password => "$1$GeQbsUb0$a2ETbvbO2ONgt/.7VBpTK1",
            # Paste in your pubkey here if you wish
            :authorized_keys => ""
        }),
        :maven  => {
            :version   => 3,
            :setup_bin => true
        },
        :python => {
            :version => "2.7.3"
        },
        :java   => {
            :install_flavor => "openjdk",
            :jdk_version    => "7"
        },
        :mysql  => {
            :server_root_password   => "zenoss",
            :server_repl_password   => "zenoss",
            :server_debian_password => "zenoss"
        }
    }
  end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"


end
